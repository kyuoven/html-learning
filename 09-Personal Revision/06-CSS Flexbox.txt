I want to go over all the different flex terms from CSS Flexbox.
( Websites to look at:
    https://css-tricks.com/snippets/css/a-guide-to-flexbox/
    https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox
    https://www.freecodecamp.org/news/flexbox-the-ultimate-css-flex-cheatsheet/
    https://www.w3schools.com/css/css3_flexbox_items.asp
        and last, but not least:
        https://www.freecodecamp.org/learn/responsive-web-design/ )

2022-05-16 
    - display: flex; = Placing the CSS property 'display: flex;' on an
      element allows you to use other flex properties to build a 
      responsive page.


    - flex-direction: row-reverse; = Divides the content into a row, horizontally.
    - flex-direction: column-reverse; = Divides the content into a column, vertically.

    - justify-content: center; = Aligns all the flex itmes to the center inside the flex container.
    - justify-content: flex-start; = Aligns items at the start of the flex container. For a row, 
      this pushes the items to the left of the container.  For a column, this pushes the items to the 
      top of the container. This is the default alignment if no justify-content is specified.
    - justify-content: flex-end; = Aligns items to the end of the flex container. For a row, this pushes 
      the items to the right of the container. 
      For a column, this pushes the items to the bottom of the container.
    - justify-content: space-between; = Aligns items to the center of the main axis, with extra 
      space placed between the items. The first and last items are pushed to the very edge of the
      flex container. For example, in a row the first item is against the left side of the container, 
      the last item is against the right side of the container, then the remaining space is distributed 
      evenly among the other items.
    - justify-content: space-around; = Similar to space-between but the first and last items are not locked 
      to the edges of the container, the space is distributed around all the items with a half space on either 
      end of the flex container.
    - justify-content: space-evenly; = Distributes space evenly between the flex items with a full space at 
      either end of the flex container.


    ! Flex containers also have a cross axis which is the 
    opposite of the main axis. For rows, the cross axis is 
    vertical and for columns, the cross axis is horizontal.
    - align-items: flex-start; = Aligns items to the start of the flex container. For rows, this aligns items to 
      the top of the container. For columns, this aligns items to the left of the container.
    - align-items: flex-end; = Aligns items to the end of the flex container. For rows, this aligns items to 
      the bottom of the container. For columns, this aligns items to the right of the container.
    - align-items: center; = Align items to the center. For rows, this vertically aligns items (equal space above 
      and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).
    - align-items: stretch; = Stretch the items to fill the flex container. For example, rows items are stretched to 
      fill the flex container top-to-bottom. This is the default value if no align-items value is specified.
    - align-items: baseline; = Align items to their baselines. Baseline is a text concept, think of it as the line 
      that the letters sit on.

    ! Using the flex-wrap property tells CSS to wrap items. This means extra items move into a new row or 
    column. The break point of where the wrapping happens depends on the size of the items and the size of the container.
    - flex-wrap: nowrap; = This is the default setting, and it does not wrap items.
    - flex-wrap: wrap; = Wraps items onto multiple lines from top-to-bottom if they are in rows and left-to-right if 
      they are in columns.
    - flex-wrap: wrap-reverse; = wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left 
      if they are in columns.

    ! The flex-shrink property takes numbers as values. The higher the number, the more it will shrink compared 
    to the other items in the container. For example, if one item has a flex-shrink value of 1 and the other has a 
    flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other.

    ! The opposite of flex-shrink is the flex-grow property. Recall that flex-shrink controls the size of the items 
    when the container shrinks. The flex-grow property controls the size of items when the parent container 
    expands.

    ! The flex-basis property specifies the initial size of the item before CSS makes adjustments with flex-shrink or 
    flex-grow.
    The units used by the flex-basis property are the same as other size properties (px, em, %, etc.). The value auto 
    sizes items based on the content.

    ! There is a shortcut available to set several flex properties at once. The flex-grow, flex-shrink, 
    and flex-basis properties can all be set together by using the flex property.
    For example, flex: 1 0 10px; will set the item to flex-grow: 1;, flex-shrink: 0;, and flex-basis: 10px;.

    ! The order property is used to tell CSS the order of how flex items appear in the flex container. 
    example: order: 1;

    ! align-self accepts the same values as align-items and will override any value set by the align-items property.
    - align-self: center; = Aligns self to the center.
    - align-self: flex-start; = Aligns self at the start of the container.
    - align-self: flex-end; = Aligns self at the end of the container.
    - align-self: stretch; = Stretches self to fill the  flex container.
    - align-self: baseline; = Aligns self to the baseline.
    

